# -*- coding: utf-8 -*-
"""week 5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XRPD9Ew1SptmtIp_hhi53pAJViMBJmwI
"""

pip install tensorflow

import os
import tensorflow as tf

# Define paths for input and output directories
original_dir = "https://drive.google.com/drive/folders/1QR8DCfozHbrlSybpyWUu2cbur5wuKmMM?usp=drive_link"  # Folder with your collected images
preprocessed_dir = "https://drive.google.com/drive/folders/1QR8DCfozHbrlSybpyWUu2cbur5wuKmMM?usp=drive_link"  # Folder to save resized images
augmented_dir = "https://drive.google.com/drive/folders/1QR8DCfozHbrlSybpyWUu2cbur5wuKmMM?usp=drive_link"  # Folder to save augmented images

# Create output directories if they don't exist
os.makedirs(preprocessed_dir, exist_ok=True)
os.makedirs(augmented_dir, exist_ok=True)

# Step 2: Image Preprocessing (Resizing and Normalizing)
def preprocess_image(image_path, output_dir):
    img = tf.io.read_file(image_path)
    img = tf.image.decode_image(img, channels=3)
    img = tf.image.resize(img, [224, 224]) / 255.0  # Resize and normalize
    base_name = os.path.basename(image_path)
    preprocessed_path = os.path.join(output_dir, base_name)
    tf.keras.preprocessing.image.save_img(preprocessed_path, img.numpy())
    return preprocessed_path  # Return the path of the preprocessed image

# Step 3: Image Augmentation
def augment_image(image_path, output_dir):
    img = tf.io.read_file(image_path)
    img = tf.image.decode_image(img, channels=3)
    img = tf.image.resize(img, [224, 224]) / 255.0  # Normalize

    augmented_images = []

    # Apply transformations
    augmented_images.append(tf.image.rot90(img))  # Rotate 90 degrees
    augmented_images.append(tf.image.flip_left_right(img))  # Horizontal flip
    augmented_images.append(tf.image.flip_up_down(img))  # Vertical flip
    augmented_images.append(tf.image.random_brightness(img, max_delta=0.3))  # Adjust brightness
    augmented_images.append(tf.image.central_crop(img, central_fraction=0.8))  # Random crop

    # Save augmented images
    base_name = os.path.basename(image_path).split('.')[0]
    for i, aug_img in enumerate(augmented_images):
        aug_img = tf.image.resize(aug_img, [224, 224]) * 255.0  # Revert normalization for saving
        augmented_path = os.path.join(output_dir, f"{base_name}_aug{i}.jpg")
        tf.keras.preprocessing.image.save_img(augmented_path, aug_img.numpy())

# Step 4: Process All Images
for filename in os.listdir(original_dir):
    if filename.endswith((".jpg", ".jpeg", ".png")):
        original_image_path = os.path.join(original_dir, filename)

        # Preprocess and save resized images
        preprocessed_image_path = preprocess_image(original_image_path, preprocessed_dir)

        # Augment and save augmented images
        augment_image(preprocessed_image_path, augmented_dir)

print("Image preprocessing and augmentation completed!")